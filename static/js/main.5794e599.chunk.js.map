{"version":3,"sources":["components/Square.js","components/Board.js","components/Score.js","functions/Ship.js","functions/Helper.js","functions/GameBoard.js","functions/Player.js","components/Game.js","components/BasicSquare.js","components/ChooseBoard.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","useState","className","onClick","sendAttack","myDiv","setMyDiv","isShip","ship","playerClasses","myClasses","player","useEffect","type","data-index","index","Board","hitBoard","setHitBoard","gameBoard","setGameBoard","event","console","log","currentTarget","getAttribute","map","location","onShip","active","Score","playerIndex","opp","getBoard","checkAmountSunk","amountSunk","setAmountSunk","missed","setMissed","hit","setHit","getHitBoard","filter","value","Number","length","Ship","shipIndex","positionArray","shipLength","locationHits","isSunk","checkIsSunk","includes","push","sendLocationHits","getPosition","checkPositionAvailable","ans","i","Math","floor","checkHorizontalConfig","checkVerticalConfig","forEach","makeVertical","initial","size","nextValue","makeRandomVertical","currentBoard","startValue","random","makeHorizontal","makeRandomHorizontal","GameBoard","allSunk","myShips","createEmptyBoard","Array","fill","addToHitBoard","checkAllShipsSunk","addShipToBoard","newShip","receiveAttack","valueHit","getGameBoard","getAllSunk","getAllShips","newHitBoard","newGameBoard","setShips","newShips","count","Player","turn","myBoard","myTurn","removeWrongHorSides","arr","toggleTurn","smartMove","oppHitBoard","available","board","availableLocations","findAvailableMoves","shipHits","findAllShipHits","sidesArray","sideLength","j","side","attackOpp","move","oppPlayer","haveLost","addShip","attack","setPlayer","ships","Game","human","setHuman","computer","setComputer","humanBoard","setHumanBoard","computerBoard","setComputerBoard","currentPlayer","setCurrentPlayer","gameOver","setGameOver","winner","setWinner","compShips","shipSizes","shipArrays","newShipArray","randomizeComputerShips","shipArray","playerShips","humanShip","user","String","myUser","userCopy","changeTurn","playerJustHit","setTimeout","compMove","finish","BasicSquare","sendMouseEnter","sendEvent","sendMyClick","sendClick","onMouseOver","ChooseBoard","currentShipIndex","setCurrentShipIndex","shipSize","setShipSize","onHor","setOnHor","myShipArray","setMyShipArray","helperBoard","setHelperBoard","getMouseLocation","copyHelperBoard","resetHighlights","copyMyShipArray","finished","App","playerShipArrays","setPlayerShipArray","gameMode","setGameMode","playerChoices","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAoCeA,EAlCA,SAACC,GAAW,IAAD,EAEEC,mBAAS,qBAAKC,UAAU,sCAAsCC,QAAUH,EAAMI,cAFhF,mBAEjBC,EAFiB,KAEVC,EAFU,KASpBC,EAAS,IACM,IAAfP,EAAMQ,OACRD,EAAS,iBAEX,IAAME,EAAgB,CACpB,uCAAuCF,EACvC,kCAAkCA,EAClC,kCAGIG,EAA6B,MAAjBV,EAAMW,OAAiBF,EAfjB,CACtB,oDACA,iCACA,iCAwBF,OAVAG,qBAAU,WACW,cAAfZ,EAAMa,KACRP,EAAS,qBAAKJ,UAAWQ,EAAU,GAAII,aAAYd,EAAMe,MAAOZ,QAAUH,EAAMI,cACxD,SAAfJ,EAAMa,KACfP,EAAS,qBAAKJ,UAAWQ,EAAU,MAEnCJ,EAAS,qBAAKJ,UAAWQ,EAAU,QAEpC,CAACV,IAEIK,GCUKW,EAxCD,SAAChB,GAAW,IAAD,EAESC,mBAASD,EAAMiB,UAFxB,mBAEhBA,EAFgB,KAENC,EAFM,OAGWjB,mBAASD,EAAMmB,WAH1B,mBAGhBA,EAHgB,KAGLC,EAHK,KAKvBR,qBAAU,WACRM,EAAYlB,EAAMiB,UAClBG,EAAapB,EAAMmB,aAClB,CAACnB,IAGJ,IAAMI,EAAa,SAACiB,GAClBC,QAAQC,IAAIF,EAAMG,cAAcC,aAAa,eAC7CzB,EAAMI,WAAWiB,EAAMG,cAAcC,aAAa,cAAezB,EAAMW,SAGzE,OACE,qBAAKT,UAAY,QAAjB,SAEIe,EAASS,KAAI,SAACC,EAAUZ,GACtB,IAAIa,GAAO,EAMX,OAJwB,IAApBT,EAAUJ,KACZa,GAAO,IAGS,IAAdD,EACK,cAAC,EAAD,CAAoBE,OAAO,OAAOhB,KAAK,YAAYE,MAAOA,EAAOX,WAAYA,EAAYO,OAAQX,EAAMW,OAAQH,KAAMoB,GAAxGb,GAEL,IAAbY,EACK,cAAC,EAAD,CAAoBE,OAAO,QAAQhB,KAAK,OAAOE,MAAOA,EAAOJ,OAAQX,EAAMW,OAAQH,KAAMoB,GAA5Eb,GAEf,cAAC,EAAD,CAAoBc,OAAO,QAAQhB,KAAK,MAAME,MAAOA,EAAOJ,OAAQX,EAAMW,OAAQH,KAAMoB,GAA3Eb,SCVfe,EAvBD,SAAC9B,GAEb,IAAMW,EAA+B,MAAtBX,EAAM+B,YAAsB,MAAQ,WAF5B,EAGa9B,mBAASD,EAAMgC,IAAIC,WAAWC,mBAH3C,mBAGhBC,EAHgB,KAGJC,EAHI,OAIKnC,mBAAS,GAJd,mBAIhBoC,EAJgB,KAIRC,EAJQ,OAKDrC,mBAAS,GALR,mBAKhBsC,EALgB,KAKXC,EALW,KAavB,OANA5B,qBAAU,WACRwB,EAAcpC,EAAMgC,IAAIC,WAAWC,mBACnCI,EAAWtC,EAAMgC,IAAIS,cAAcC,QAAO,SAAAC,GAAK,OAAsB,IAAlBC,OAAOD,MAAeE,QACzEL,EAAQxC,EAAMgC,IAAIS,cAAcC,QAAO,SAAAC,GAAK,OAAsB,IAAlBC,OAAOD,MAAeE,UACrE,CAAC7C,IAGF,sBAAKE,UAAU,QAAf,UACE,mCAAK,+BAAOS,IAAZ,OACA,2CAAa,+BAAO0B,IAApB,OACA,wCAAU,+BAAOE,IAAjB,OACA,yCAAW,+BAAOJ,IAAlB,W,OCgBSW,EApCF,SAACC,EAAWC,GACvB,IAAMC,EAAaD,EAAcH,OAC7BK,EAAe,GACfC,GAAS,EAePC,EAAc,WAOlB,OANIF,EAAaL,SAAWI,GAC1BE,GAAS,EACT7B,QAAQC,IAAR,eAAoBwB,EAApB,mCAAgEI,IAEhEA,GAAS,EAEJA,GAOT,MAAO,CAACZ,IA3BI,SAACZ,GACX,SAAIqB,EAAcK,SAAST,OAAOjB,KAAeuB,EAAaG,SAAST,OAAOjB,OAC5EuB,EAAaI,KAAK3B,GAClByB,KACO,IAuBEG,iBAlBY,WACvB,OAAOL,GAiBsBE,cAAaI,YAJxB,WAClB,OAAOR,KCkBLS,EAAyB,SAACT,EAAe7B,GAC7C,IAAIuC,GAAM,EACV,QAA2C,IApCf,SAACV,GAC7B,IAAK,IAAIW,EAAI,EAAGA,EAAGX,EAAcH,OAAOc,IACtC,GAAQ,IAAJA,EAAM,CACR,GAAIX,EAAcW,GAAG,IAAMX,EAAcW,EAAE,IAAMX,EAAcW,GAAG,IAAMX,EAAcW,EAAE,GACtF,OAAO,EAET,GAAIC,KAAKC,MAAMb,EAAcW,GAAG,MAAQC,KAAKC,MAAMb,EAAcW,EAAE,GAAG,IACpE,OAAO,EAIb,OAAO,EAyBHG,CAAsBd,KAA8D,IAjD9D,SAACA,GAG3B,IADA,IAAIU,GAAM,EACDC,EAAI,EAAGA,EAAGX,EAAcH,OAAOc,IAC9B,IAAJA,GACEX,EAAcW,GAAG,KAAOX,EAAcW,EAAE,IAAMX,EAAcW,GAAG,KAAOX,EAAcW,EAAE,KACxFD,GAAM,GAIZ,OAAOA,EAuC4CK,CAAoBf,MAGvEA,EAAcgB,SAAQ,SAACrC,IACjBA,EAAS,GAAKA,EAAS,MACzB+B,GAAM,MAGXV,EAAcgB,SAAQ,SAACrC,IACO,IAAxBR,EAAUQ,KACZ+B,GAAM,MAGFA,IAyBHO,EAAe,SAACC,EAASC,GAE7B,IADA,IAAInB,EAAgB,CAACkB,GACZP,EAAE,EAAGA,EAAEQ,EAAMR,IAAI,CACxB,IAAMS,EAAa,GAAGT,EAAKO,EAC3BlB,EAAcM,KAAKc,GAErB,OAAOpB,GAGHqB,EAAqB,SAACF,EAAMG,GAGhC,IADA,IAAItB,EAAgB,EAAE,GAAG,GAAG,IACmC,IAAxDS,EAAuBT,EAAesB,IAAuB,CAClE,IAAMC,EAAaX,KAAKC,MAAMD,KAAKY,UAAY,IAAc,IAARL,EAAK,KAC1DnB,EAAgBiB,EAAaM,EAAYJ,GAE3C,OAAOnB,GAGHyB,EAAiB,SAACP,EAASC,GAE/B,IADA,IAAInB,EAAgB,CAACkB,GACZP,EAAE,EAAGA,EAAEQ,EAAMR,IAAI,CACxB,IAAMS,EAAYF,EAAQP,EAC1BX,EAAcM,KAAKc,GAErB,OAAOpB,GAGH0B,EAAuB,SAACP,EAAMG,GAGlC,IADA,IAAItB,EAAgB,EAAE,GAAG,GAAG,IACmC,IAAxDS,EAAuBT,EAAesB,IAAuB,CAClE,IAAMC,EAAaX,KAAKC,MAAMD,KAAKY,UAAY,IAAIL,IACnDnB,EAAgByB,EAAeF,EAAWJ,GAE5C,OAAOnB,GCPM2B,EAhHG,WAEhB,IACIxD,EACAF,EAFA2D,GAAU,EAGVC,EAAU,GAQRC,EAAmB,WACvB3D,EAAY,IAAI4D,MAAM,KAAKC,MAAM,GACjC/D,EAAW,IAAI8D,MAAM,KAAKC,MAAM,IA8B5BC,EAAgB,SAACtD,EAAUgB,GAI/B1B,EAASU,GAAYgB,GAGjBuC,EAAoB,WACxB,IAAIxB,GAAI,EACRmB,EAAQb,SAAQ,SAACxD,IACU,IAArBA,EAAK4C,gBACPM,GAAM,MAGVkB,EAAUlB,GAqCZ,OAFAoB,IAEO,CACLA,mBACAK,eAhFqB,SAACnC,GACtB,IAAMD,EAAY8B,EAAQhC,OAC1B,GAAIY,EAAuBT,EAAe7B,GAAW,CACnD,IAAMiE,EAAUtC,EAAKC,EAAUC,GAC/B6B,EAAO,sBAAOA,GAAP,CAAgBO,IACvBpC,EAAcgB,SAAQ,SAACrC,GACrBR,EAAUQ,GAAYoB,KAG1B,OAAO5B,GAwEPkE,cAnEoB,SAAC1D,GACrB,IAAM2D,EAAWnE,EAAUQ,IACT,IAAd2D,GACcT,EAAQS,GAChB/C,IAAIZ,GACZsD,EAActD,EAAS,IAEvBsD,EAActD,EAAS,GAGzB,OADAuD,IACOjE,GA0DPsE,aAtBmB,kBAAMpE,GAuBzBqE,WAtBiB,kBAAMZ,GAuBvBnC,YAtBkB,kBAAMxB,GAuBxBwE,YAtBkB,kBAAMZ,GAuBxB3D,YArBkB,SAACwE,GACnBzE,EAAWyE,GAqBXtE,aAnBmB,SAACuE,GACpBxE,EAAYwE,GAmBZC,SAjBe,SAACC,GAChBhB,EAAUgB,GAiBV3D,gBA7CsB,WACtB,IAAI4D,EAAQ,EAMZ,OALAjB,EAAQb,SAAQ,SAACxD,IACY,IAAvBA,EAAK4C,gBACP0C,GAAS,MAGNA,KCYIC,EAjFA,SAAChE,EAAaiE,GAE3B,IAAMC,EAAUtB,IACZuB,EAASF,EA6DPG,EAAsB,SAACC,EAAIzE,GAE/B,OAAIiC,KAAKC,MAAMuC,EAAI,GAAG,MAAOxC,KAAKC,MAAMlC,EAAS,KAAOiC,KAAKC,MAAMuC,EAAI,GAAG,MAAOxC,KAAKC,MAAMlC,EAAS,IAC5F,CAACyE,EAAI,GAAGA,EAAI,IAEdA,GAQT,MAAO,CAACnE,SAFS,kBAAMgE,GAELI,WAJC,kBAAOH,GAIII,UA7CZ,SAACC,GAKjB,IAJA,IAAMC,EFTiB,SAACC,GAC1B,IAAIC,EAAqB,GAMzB,OALAD,EAAMzC,SAAQ,SAACrC,EAAUZ,IACL,IAAdY,GACF+E,EAAmBpD,KAAKvC,MAGrB2F,EEEaC,CAAmBJ,GAC/BK,EFAc,SAACH,GACvB,IAAIG,EAAW,GAMf,OALAH,EAAMzC,SAAQ,SAACrC,EAAUZ,GACN,IAAbY,GACFiF,EAAStD,KAAKvC,MAGX6F,EEPYC,CAAgBN,GAGxB5C,EAAI,EAAGA,EAAEiD,EAAS/D,OAAQc,IAKjC,IAJA,IAAIhC,EAAWiF,EAASjD,GACpBmD,EAAa,CAACnF,EAAS,EAAGA,EAAS,GAAIA,EAAS,EAAEA,EAAS,IAE3DoF,GADJD,EAAaX,EAAoBW,EAAYnF,IACjBkB,OACnBmE,EAAI,EAAGA,EAAEF,EAAWjE,OAAQmE,IAAI,CACvC,IAAIC,EAAOH,EAAWE,GACtB,GAAIJ,EAASvD,SAAS4D,IAAST,EAAUnD,SAASyD,GAAYE,EAAGD,EAAW,GAAIA,IAC9E,OAAOD,GAAYE,EAAE,GAAG,GAK9B,IAAK,IAAIrD,EAAI,EAAGA,EAAEiD,EAAS/D,OAAQc,IAAI,CACrC,IAAIhC,EAAWiF,EAASjD,GACpBmD,EAAa,CAACnF,EAAS,EAAGA,EAAS,GAAIA,EAAS,EAAEA,EAAS,IAC/DmF,EAAaX,EAAoBW,EAAYnF,GAC7C,IAAK,IAAIqF,EAAI,EAAGA,EAAEF,EAAWjE,OAAQmE,IAAI,CACvC,IAAIC,EAAOH,EAAWE,GACtB,GAAIR,EAAUnD,SAAS4D,GACrB,OAAOA,GAIb,OAAOT,EAAU5C,KAAKC,MAAMD,KAAKY,SAAWgC,EAAU3D,UAgBfqE,UAlEvB,SAACC,EAAMC,GACvBA,EAAU/B,cAAc8B,IAiE0BE,SA1DnC,WACf,OAAOpB,EAAQT,cAyD6C8B,QAtD9C,SAAC9G,GACfyF,EAAQd,eAAe3E,IAqD8CiC,YAlDnD,WAClB,OAAOwD,EAAQxD,eAiDmE4C,cA9D9D,SAACkC,GACrB,OAAOtB,EAAQZ,cAAckC,IA6DoEC,UAxEjF,SAACrG,EAAWF,EAAUwG,GACtCxB,EAAQ/E,YAAYD,GACpBgF,EAAQ7E,aAAaD,GACrB8E,EAAQL,SAAS6B,MC8FNC,EAnGF,SAAC1H,GAAW,IAAD,EACIC,mBAAS8F,EAAO,GAAE,IADtB,mBACf4B,EADe,KACRC,EADQ,OAEU3H,mBAAS8F,EAAO,GAAE,IAF5B,mBAEf8B,EAFe,KAELC,EAFK,OAGc7H,mBAAS,IAAI8E,MAAM,KAAKC,MAAM,IAH5C,mBAGf+C,EAHe,KAGHC,EAHG,OAIoB/H,mBAAS,IAAI8E,MAAM,KAAKC,MAAM,IAJlD,mBAIfiD,EAJe,KAIAC,EAJA,OAKoBjI,mBAAS,GAL7B,mBAKfkI,EALe,KAKAC,EALA,OAMUnI,oBAAS,GANnB,mBAMfoI,EANe,KAMLC,EANK,OAOMrI,mBAAS,IAPf,mBAOfsI,EAPe,KAOPC,EAPO,KAUtB5H,qBAAU,WACR0H,GAAY,GAEZ,IAAIG,EAAY1C,EAAO,GAAE,GAQzB,GHwC2B,SAAC2C,GAC9B,IAAIC,EAAa,GACbrE,EAAe,IAAIS,MAAM,KAAKC,MAAM,GAexC,OAdA0D,EAAU1E,SAAQ,SAACG,GACjB,IAAIyE,EAGFA,EADa,IADFhF,KAAKC,MAAsB,EAAhBD,KAAKY,UAEZH,EAAmBF,EAAMG,GAEzBI,EAAqBP,EAAMG,GAE5CqE,EAAWrF,KAAKsF,GAChBA,EAAa5E,SAAQ,SAACrC,GACpB2C,EAAa3C,GAAY,QAG7BL,QAAQC,IAAI,yBAA0BoH,GAC/BA,EGhEkBE,CAAuB7I,EAAM0I,WACrC1E,SAAQ,SAAC8E,GACtBL,EAAUnB,QAAQwB,MAEpBhB,EAAYW,GAGRzI,EAAM+I,YAAY,CACpB,IAAIC,EAAYjD,EAAO,GAAE,GACA/F,EAAM+I,YACd/E,SAAQ,SAAC8E,GACxBE,EAAU1B,QAAQwB,MAEpBlB,EAASoB,MAEX,CAAChJ,IAEH,IAAMI,EAAa,SAACuB,EAAUsH,GAC5B,GAAIC,OAAOf,KAAkBc,IAAmB,IAAXZ,EAAgB,CACnD/G,QAAQC,IAAR,2BAAgC0H,EAAhC,eAA2CtH,IAC3C,IAAIwH,EAAmB,MAATF,EAAetB,EAAQE,EACjCuB,EAAWrD,EAAOkD,GAAK,GAC3BG,EAAS5B,UACP2B,EAAOlH,WAAWsD,eAClB4D,EAAOlH,WAAWQ,cAClB0G,EAAOlH,WAAWwD,eAEpB,IAAMC,EAAc0D,EAAS/D,cAAczC,OAAOjB,IACrC,MAATsH,GACFrB,EAASwB,GACTpB,EAActC,KAEdoC,EAAYsB,GACZlB,EAAiBxC,IAEnB2D,MAIEA,EAAa,WACjBjB,EAAmC,IAAlBD,EAAsB,EAAI,IAsB7C,OAnBAvH,qBAAU,WACR,IAAM0I,EAAkC,IAAlBnB,EAAsBN,EAAWF,GAEjC,IADA2B,EAAcjC,aAElC/F,QAAQC,IAAI,UAAU+H,EAAc,aACpChB,GAAY,GACZE,EAA4B,IAAlBL,EAAsB,MAAQ,aAS1CoB,YANA,WACE,GAAsB,IAAlBpB,EAAqB,CACvB,IAAMqB,EAAW3B,EAASvB,UAAUyB,GACpC3H,EAAWoJ,EAAU,QAGR,OACjB,CAACrB,IAID,+BAEiB,IAAbE,EACI,sBAAKnI,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,cAAC,EAAD,CAAOe,SAAW8G,EAAY3H,WAAYA,EAAYO,OAAO,IAAKQ,UAAWwG,EAAM1F,WAAWsD,iBAC9F,cAAC,EAAD,CAAOtE,SAAWgH,EAAe7H,WAAYA,EAAYO,OAAO,IAAIQ,UAAWwG,EAAM1F,WAAWsD,oBAElG,sBAAKrF,UAAU,cAAf,UACE,cAAC,EAAD,CAAO6B,YAAa,IAAKC,IAAO6F,IAChC,cAAC,EAAD,CAAO9F,YAAa,IAAKC,IAAO2F,UAGpC,sBAAKzH,UAAU,gBAAf,UACE,gDAAkB,+BAAOqI,IAAzB,OACA,wBAAQrI,UAAU,SAASC,QAAS,kBAAMH,EAAMyJ,UAAhD,8BCrECC,EA3BK,SAAC1J,GAAW,IAAD,EAEHC,mBAAS,qBAAKC,UAAU,kBAFrB,mBAEtBG,EAFsB,KAEfC,EAFe,KAOvBqJ,EAAiB,WACrB3J,EAAM4J,UAAU5J,EAAMe,QAGlB8I,EAAc,WAClB7J,EAAM8J,UAAU9J,EAAMe,QAYxB,OARAH,qBAAU,YACa,IAAjBZ,EAAM6B,OACRvB,EAAS,qBAAKJ,UAdE,0CAcuB6J,YAAaJ,EAAgBxJ,QAAS0J,KAE7EvJ,EAAS,qBAAKJ,UAfI,eAesB6J,YAAaJ,OAEtD,CAAC3J,IAEIK,GCmEK2J,EAzFK,SAAChK,GAAW,IAAD,EACGC,oBAAS,GADZ,gCAEmBA,mBAAS,IAF5B,mBAEtBgK,EAFsB,KAEJC,EAFI,OAGGjK,mBAASD,EAAM0I,UAAUuB,IAH5B,mBAGtBE,EAHsB,KAGZC,EAHY,OAIHnK,oBAAS,GAJN,mBAItBoK,EAJsB,KAIfC,EAJe,OAKSrK,mBAAS,IALlB,mBAKtBsK,EALsB,KAKTC,EALS,OAOSvK,mBAAS,IAAI8E,MAAM,KAAKC,MAAM,IAPvC,mBAOtByF,EAPsB,KAOTC,EAPS,KAWvBC,EAAmB,SAAChJ,GACxB,IACImH,EADA8B,EAAkBC,IAGpB/B,GADU,IAARuB,EACU5F,EAAe9C,EAASwI,GAExBlG,EAAatC,EAASwI,GAEhC1G,EAAuBqF,EAAW8B,GACpC9B,EAAU9E,SAAQ,SAACrC,GACjBiJ,EAAgBjJ,GAAY,KAG9BiJ,EAAgBlJ,KAAI,SAACC,GACnB,OAAgB,IAAZA,GACM,EAEHA,KAGX+I,EAAeE,IAGXC,EAAkB,WACtB,IAAID,EAAe,YAAOH,GAQ1B,OAPAG,EAAkBA,EAAgBlJ,KAAI,SAACC,GACrC,OAAiB,IAAbA,GACM,EAEHA,KAET+I,EAAeE,GACRA,GAGHtD,EAAU,SAAC3F,GACf,IACImH,EADA8B,EAAkBC,IAOtB,GAJE/B,GADU,IAARuB,EACU5F,EAAe9C,EAASwI,GAExBlG,EAAatC,EAASwI,GAEhC1G,EAAuBqF,EAAW8B,GAAiB,CACrD9B,EAAU9E,SAAQ,SAACrC,GACjBiJ,EAAgBjJ,GAAY,KAE9B,IAAImJ,EAAe,YAAOP,GAC1BO,EAAgBxH,KAAKwF,GACrB0B,EAAeM,GACXA,EAAgBjI,SAAW7C,EAAM0I,UAAU7F,QAC7C7C,EAAM+K,SAASD,GAEjBV,EAAYpK,EAAM0I,UAAUuB,EAAiB,IAC7CC,EAAoBD,EAAiB,GAEvCS,EAAeE,IAGjB,OACE,sBAAK1K,UAAW,eAAhB,UACE,qBAAKA,UAAY,QAAjB,SAEMuK,EAAY/I,KAAI,SAACC,EAAUZ,GACzB,OAAkB,IAAdY,EACK,cAAC,EAAD,CAAyBZ,MAAOA,EAAOc,QAAQ,EAAO+H,UAAWe,EAAkBb,UAAWxC,GAA5EvG,GAEpB,cAAC,EAAD,CAAyBA,MAAOA,EAAOc,QAAQ,EAAM+H,UAAWe,EAAkBb,UAAWxC,GAA3EvG,QAIjC,8BACE,wBAAQb,UAAY,SAASC,QAAW,kBAAMmK,GAAUD,IAAxD,+B,MCjDOW,MAjCf,WACE,IAAMtC,EAAY,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GADpB,EAEkCzI,mBAAS,IAF3C,mBAENgL,EAFM,KAEYC,EAFZ,OAImBjL,oBAAS,GAJ5B,mBAINkL,EAJM,KAIIC,EAJJ,KAiBb,OACE,sBAAKlL,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,SACE,+CAEF,+BAEiB,IAAbiL,EACI,cAAC,EAAD,CAAazC,UAAWA,EAAWqC,SAnBhB,SAACM,GAC9BC,MAAM,6BAA8BD,GACpC/J,QAAQC,IAAI,6BAA8B8J,GAC1CH,EAAmBG,GACnBD,GAAY,MAgBF,cAAC,EAAD,CAAMrC,YAAckC,EAAkBvC,UAAWA,EAAWe,OAbxD,WACd2B,GAAY,YCPDG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5794e599.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Square = (props) => {\n  \n  const [myDiv, setMyDiv] = useState(<div className=\"board-square board-square-available\" onClick ={props.sendAttack}></div>);\n\n  const computerClasses = [\n    \"board-square board-square-available display-hover\",\n    \"board-square board-square-miss\",\n    \"board-square board-square-hit\"\n  ];\n  let isShip = \"\";\n  if (props.ship === true){\n    isShip = \"square-isShip\";\n  }\n  const playerClasses = [\n    \"board-square board-square-available \"+isShip,\n    \"board-square board-square-miss \"+isShip,\n    \"board-square board-square-hit \"\n  ];\n\n  const myClasses = props.player === \"0\" ? playerClasses : computerClasses;\n\n  useEffect(() => {\n    if (props.type === 'available'){\n      setMyDiv(<div className={myClasses[0]} data-index={props.index} onClick ={props.sendAttack}></div>)\n    } else if (props.type === 'miss'){\n      setMyDiv(<div className={myClasses[1]}></div>)\n    } else {\n      setMyDiv(<div className={myClasses[2]}></div>)\n    }\n  }, [props])\n\n  return (myDiv);\n}\n\nexport default Square;","import React, { useState, useEffect } from 'react';\nimport Square from './Square';\n\nconst Board = (props) => { \n\n  const [hitBoard, setHitBoard] = useState(props.hitBoard);\n  const [gameBoard, setGameBoard] = useState(props.gameBoard);\n\n  useEffect(() => {\n    setHitBoard(props.hitBoard);\n    setGameBoard(props.gameBoard);\n  }, [props])\n\n\n  const sendAttack = (event) => {\n    console.log(event.currentTarget.getAttribute('data-index'));\n    props.sendAttack(event.currentTarget.getAttribute('data-index'), props.player);\n  }\n\n  return (\n    <div className = \"board\">\n      {\n        hitBoard.map((location, index) => {\n          let onShip=false;\n          \n          if (gameBoard[index]!==-1){\n            onShip=true;\n          }\n\n          if (location === -1){\n            return <Square key={index} active=\"true\" type=\"available\" index={index} sendAttack={sendAttack} player={props.player} ship={onShip}/>\n          }\n          if (location === 0){\n            return <Square key={index} active=\"false\" type=\"miss\" index={index} player={props.player} ship={onShip}/>\n          }\n          return <Square key={index} active=\"false\" type=\"hit\" index={index} player={props.player} ship={onShip}/>\n          \n        })\n      }\n    </div>\n  );\n}\n\nexport default Board;","import React, { useState, useEffect} from 'react';\n\nconst Score = (props) => {\n\n  const player = props.playerIndex === \"0\" ? \"You\" : \"Computer\";\n  const [amountSunk, setAmountSunk] = useState(props.opp.getBoard().checkAmountSunk());\n  const [missed, setMissed] = useState(0);\n  const [hit, setHit] = useState(0);\n\n  useEffect(()=> {\n    setAmountSunk(props.opp.getBoard().checkAmountSunk());\n    setMissed((props.opp.getHitBoard().filter(value => Number(value) === 0)).length);\n    setHit((props.opp.getHitBoard().filter(value => Number(value) === 1)).length);\n  }, [props])\n\n  return (\n    <div className=\"score\">\n      <h2> <span>{player}</span> </h2>\n      <h3> Missed: <span>{missed}</span> </h3>\n      <h3> Hit: <span>{hit}</span> </h3>\n      <h3> Sunk: <span>{amountSunk}</span> </h3>\n    </div>\n  );\n}\n\nexport default Score;","const Ship = (shipIndex, positionArray) => {\n  const shipLength = positionArray.length;\n  let locationHits = [];\n  let isSunk = false;\n\n  const hit = (location) => {\n    if (positionArray.includes(Number(location)) && !locationHits.includes(Number(location))){\n      locationHits.push(location);\n      checkIsSunk();\n      return true;\n    }\n    return false;\n  }\n\n  const sendLocationHits = () => {\n    return locationHits;\n  }\n\n  const checkIsSunk = () => {\n    if (locationHits.length === shipLength){\n      isSunk = true;\n      console.log(`Ship ${shipIndex} has been sunken, so isSunk is:`, isSunk)\n    } else {\n      isSunk = false;\n    }\n    return isSunk;\n  }\n\n  const getPosition = () => {\n    return positionArray;\n  }\n\n  return {hit, sendLocationHits, checkIsSunk, getPosition}\n\n}\n\nexport default Ship;","const checkVerticalConfig = (positionArray) => {\n  // Will FAIL on Duplications NOTE\n  let ans = true;\n  for (let i = 0; i< positionArray.length;i++){\n    if (i!==0){\n      if (positionArray[i]+10 !== positionArray[i-1] && positionArray[i]-10 !== positionArray[i-1] ){\n        ans = false;\n      }\n    }\n  }\n  return ans;\n}\n\nconst checkHorizontalConfig = (positionArray) => {\n  for (let i = 0; i< positionArray.length;i++){\n    if (i!==0){\n      if (positionArray[i]+1 !== positionArray[i-1] && positionArray[i]-1 !== positionArray[i-1] ){\n        return false;\n      }\n      if (Math.floor(positionArray[i]/10) !== Math.floor(positionArray[i-1]/10)){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nconst findAvailableMoves = (board) => {\n  let availableLocations = [];\n  board.forEach((location, index) => {\n    if (location === -1){\n      availableLocations.push(index);\n    }\n  })\n  return availableLocations;\n}\n\nconst findAllShipHits = (board) => {\n  let shipHits = [];\n  board.forEach((location, index) => {\n    if (location === 1){\n      shipHits.push(index);\n    }\n  })\n  return shipHits;\n}\n\nconst checkPositionAvailable = (positionArray, gameBoard) => {\n  let ans = true;\n  if (checkHorizontalConfig(positionArray)!==true && checkVerticalConfig(positionArray)!==true){\n    return false; // bad config\n  }\n  positionArray.forEach((location) => {\n    if (location<0 || location>99){ // can't be outside board\n      ans = false;\n    }\n  })\n positionArray.forEach((location) => {\n   if (gameBoard[location]!== -1){ // can't be on another ship\n     ans = false;\n   }\n })\n  return ans;\n}\n\n\n\nconst randomizeComputerShips = (shipSizes) => {\n  let shipArrays = [];\n  let currentBoard = new Array(100).fill(-1);\n  shipSizes.forEach((size) => {\n    let newShipArray;\n    let choice = Math.floor(Math.random() * 2);\n    if (choice === 0){\n      newShipArray = makeRandomVertical(size, currentBoard);\n    } else {\n      newShipArray = makeRandomHorizontal(size, currentBoard);\n    }\n    shipArrays.push(newShipArray);\n    newShipArray.forEach((location) => {\n      currentBoard[location] = 1; // simply so ships aren't put on top of one another\n    })\n  })\n  console.log('computer ship arrays: ', shipArrays);\n  return shipArrays;\n}\n\nconst makeVertical = (initial, size) => {\n  let positionArray = [initial];\n  for (let i=1; i<size; i++){\n    const nextValue = (10*i) + initial;\n    positionArray.push(nextValue);\n  }\n  return positionArray;\n}\n\nconst makeRandomVertical = (size, currentBoard) => {\n  // picked number is top, the rest go down vertically\n  let positionArray = [-3,-2,-1];\n  while (checkPositionAvailable(positionArray, currentBoard) !== true){\n    const startValue = Math.floor(Math.random() * (100-((size-1)*10)));\n    positionArray = makeVertical(startValue, size);\n  }\n  return positionArray;\n}\n\nconst makeHorizontal = (initial, size) => {\n  let positionArray = [initial];\n  for (let i=1; i<size; i++){\n    const nextValue = initial+i;\n    positionArray.push(nextValue);\n  }\n  return positionArray;\n}\n\nconst makeRandomHorizontal = (size, currentBoard) => {\n  // picked number is top, the rest go down vertically\n  let positionArray = [-3,-2,-1];\n  while (checkPositionAvailable(positionArray, currentBoard) !== true){\n    const startValue = Math.floor(Math.random() * (100-size));\n    positionArray = makeHorizontal(startValue,size);\n  }\n  return positionArray;\n}\n\nexport {\n  checkVerticalConfig,\n  checkHorizontalConfig,\n  findAvailableMoves,\n  findAllShipHits,\n  checkPositionAvailable,\n  randomizeComputerShips,\n  makeVertical,\n  makeHorizontal\n}","import Ship from './Ship'\nimport {checkPositionAvailable} from './Helper'\n\nconst GameBoard = () => {\n  // Board of just one player (each player has one)\n  let allSunk = false;\n  let gameBoard;\n  let hitBoard;\n  let myShips = []; // <- Fill with Ship objects\n  \n  // fill with -1s\n  // every time add ship replace 0s with shipIndex at the appropriate indexs\n  // ex. [...,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,...] -> [...,-1,2,2,2,2,-1,-1,-1,-1,4,4,-1,...]\n  // (above both ships are horizontal obviously)\n\n  // ACTIVATED ON INIT\n  const createEmptyBoard = () => {\n    gameBoard = new Array(100).fill(-1);\n    hitBoard = new Array(100).fill(-1);\n  }\n  \n  const addShipToBoard = (positionArray) => {\n    const shipIndex = myShips.length;\n    if (checkPositionAvailable(positionArray, gameBoard)){\n      const newShip = Ship(shipIndex,positionArray);\n      myShips = [...myShips, newShip];\n      positionArray.forEach((location) => {\n        gameBoard[location] = shipIndex;\n      })\n    }\n    return gameBoard;\n  }\n\n  \n  // Assumes location is valid 0..98,99\n  const receiveAttack = (location) => {\n    const valueHit = gameBoard[location];\n    if (valueHit !== -1){\n      const hitShip = myShips[valueHit];\n      hitShip.hit(location);\n      addToHitBoard(location,1);\n    } else {\n      addToHitBoard(location,0);\n    }\n    checkAllShipsSunk();\n    return hitBoard;\n  }\n\n  const addToHitBoard = (location, value) => {\n    // -1 -> Not hit yet\n    // 0 -> Hit, Empty\n    // 1 -> Hit, Ship\n    hitBoard[location] = value;\n  }\n\n  const checkAllShipsSunk = () => {\n    let ans=true;\n    myShips.forEach((ship) => {\n      if (ship.checkIsSunk()!==true){\n        ans = false;\n      } \n    });\n    allSunk = ans;\n  }\n\n  const checkAmountSunk = () => {\n    let count = 0;\n    myShips.forEach((ship) => {\n      if (ship.checkIsSunk() === true){\n        count += 1;\n      } \n    });\n    return count;\n  }\n\n  const reset = () => {\n    createEmptyBoard();\n    allSunk = false;\n    myShips =[];\n  }\n\n  const getGameBoard = () => gameBoard;\n  const getAllSunk = () => allSunk;\n  const getHitBoard = () => hitBoard;\n  const getAllShips = () => myShips;\n\n  const setHitBoard = (newHitBoard) => {\n    hitBoard = newHitBoard;\n  } \n  const setGameBoard = (newGameBoard) => {\n    gameBoard = newGameBoard;\n  }\n  const setShips = (newShips) => {\n    myShips = newShips;\n  }\n\n  // INIT\n  createEmptyBoard(); \n\n  return {\n    createEmptyBoard,\n    addShipToBoard,\n    receiveAttack, \n    getGameBoard, \n    getAllSunk, \n    getHitBoard, \n    getAllShips, \n    setHitBoard, \n    setGameBoard, \n    setShips,\n    checkAmountSunk, \n  }\n\n}\n\nexport default GameBoard;","import GameBoard from './GameBoard'\nimport {findAvailableMoves, findAllShipHits} from './Helper'\n\nconst Player = (playerIndex, turn) => {\n\n  const myBoard = GameBoard();\n  let myTurn = turn;\n\n  const setPlayer = (gameBoard, hitBoard, ships) => {\n    myBoard.setHitBoard(hitBoard);\n    myBoard.setGameBoard(gameBoard);\n    myBoard.setShips(ships);\n  }\n\n  const attackOpp = (move, oppPlayer) => {\n    oppPlayer.receiveAttack(move);\n  }\n\n  const receiveAttack = (attack) => {\n    return myBoard.receiveAttack(attack);\n  }\n\n  const haveLost = () => {\n    return myBoard.getAllSunk();\n  }\n\n  const addShip = (ship) => {\n    myBoard.addShipToBoard(ship);\n  }\n\n  const getHitBoard = () => {\n    return myBoard.getHitBoard();\n  }\n\n\n  const smartMove = (oppHitBoard) => {\n    const available = findAvailableMoves(oppHitBoard);\n    const shipHits = findAllShipHits(oppHitBoard);\n    // Preferably, attack next to a ship hit\n    // check if a side is already a ship hit -> that way if parallel side is available, choose it \n    for (let i = 0; i<shipHits.length; i++){\n      let location = shipHits[i];\n      let sidesArray = [location-1, location-10, location+1,location+10];\n      sidesArray = removeWrongHorSides(sidesArray, location);\n      let sideLength = sidesArray.length;\n      for (let j = 0; j<sidesArray.length; j++){\n        let side = sidesArray[j];\n        if (shipHits.includes(side) && available.includes(sidesArray[(j+(sideLength/2))%sideLength])){\n          return sidesArray[(j+2)%4];\n        }\n      }\n    }\n    // all sides are not ship hits, so choose available side if there is available\n    for (let i = 0; i<shipHits.length; i++){\n      let location = shipHits[i];\n      let sidesArray = [location-1, location-10, location+1,location+10];\n      sidesArray = removeWrongHorSides(sidesArray, location);\n      for (let j = 0; j<sidesArray.length; j++){\n        let side = sidesArray[j];\n        if (available.includes(side)){\n          return side;\n        }\n      }\n    }\n    return available[Math.floor(Math.random() * available.length)];\n  }\n\n  const removeWrongHorSides = (arr,location) => {\n    // for example if there is 50,51 don't put 49\n    if (Math.floor(arr[0]/10)!== Math.floor(location/10) || Math.floor(arr[2]/10)!== Math.floor(location/10)){\n      return [arr[1],arr[3]];\n    }\n    return arr;\n  }\n\n\n  const toggleTurn = () => !myTurn;\n\n  const getBoard = () => myBoard;\n\n  return {getBoard, toggleTurn, smartMove, attackOpp, haveLost, addShip, getHitBoard, receiveAttack, setPlayer};\n\n}\n\nexport default Player;","import React, { useState, useEffect} from 'react';\nimport Board from './Board';\nimport Score from './Score';\nimport Player from '../functions/Player'\nimport {randomizeComputerShips} from '../functions/Helper'\n\nconst Game = (props) => {\n  const [human, setHuman] = useState(Player(0,true));\n  const [computer, setComputer] = useState(Player(1,false));\n  const [humanBoard, setHumanBoard] = useState(new Array(100).fill(-1));\n  const [computerBoard, setComputerBoard] = useState(new Array(100).fill(-1));\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(\"\");\n  \n\n  useEffect(() => {\n    setGameOver(false);\n    // Computer Set Ships\n    let compShips = Player(1,false);\n    const shipCompArrays = randomizeComputerShips(props.shipSizes);\n    shipCompArrays.forEach((shipArray) => {\n      compShips.addShip(shipArray);\n    })\n    setComputer(compShips);\n\n    // Player Set Ships\n    if (props.playerShips){\n      let humanShip = Player(0,true);\n      const shipPlayerArrays = props.playerShips;\n      shipPlayerArrays.forEach((shipArray) => {\n        humanShip.addShip(shipArray);\n      })\n      setHuman(humanShip);\n    }\n  },[props]);\n\n  const sendAttack = (location, user) => {\n    if (String(currentPlayer)!== user && gameOver!==true){\n      console.log(`Attack on Player ${user} at ${location}`);\n      let myUser = (user === \"0\" ? human : computer);\n      let userCopy = Player(user,false);\n      userCopy.setPlayer(\n        myUser.getBoard().getGameBoard(),\n        myUser.getBoard().getHitBoard(),\n        myUser.getBoard().getAllShips()\n      )\n      const newHitBoard = userCopy.receiveAttack(Number(location));\n      if (user === \"0\"){\n        setHuman(userCopy);\n        setHumanBoard(newHitBoard);\n      } else {\n        setComputer(userCopy);\n        setComputerBoard(newHitBoard);\n      }\n      changeTurn();\n    }\n  }\n\n  const changeTurn = () => {\n    setCurrentPlayer(currentPlayer === 0 ? 1 : 0);\n  }\n\n  useEffect(() => {\n    const playerJustHit = currentPlayer === 0 ? computer : human;\n    const hasPlayerLost = playerJustHit.haveLost();\n    if (hasPlayerLost === true){\n      console.log('Player ',playerJustHit,' has lost')\n      setGameOver(true);\n      setWinner(currentPlayer === 0 ? 'You' : 'Computer')\n      \n    }\n    function wait() {\n      if (currentPlayer === 1 ){\n        const compMove = computer.smartMove(humanBoard);\n        sendAttack(compMove, \"0\");\n      }\n    }\n    setTimeout(wait, 200);\n  },[currentPlayer])\n\n\n  return (\n    <div>\n      {\n        gameOver === false\n          ? <div className=\"game\">  \n              <div className=\"game-boards\">\n                <Board hitBoard ={humanBoard} sendAttack={sendAttack} player=\"0\"  gameBoard={human.getBoard().getGameBoard()}/>\n                <Board hitBoard ={computerBoard} sendAttack={sendAttack} player=\"1\" gameBoard={human.getBoard().getGameBoard()}/>\n              </div>\n              <div className=\"game-scores\">\n                <Score playerIndex={\"0\"} opp = {computer}/>\n                <Score playerIndex={\"1\"} opp = {human}/>\n              </div>\n            </div>\n          : <div className=\"winner-banner\">\n              <h1>The Winner Is <span>{winner}</span> </h1>\n              <button className=\"button\" onClick={() => props.finish()}>Play Again</button>\n            </div>\n      }\n    </div>\n  );\n}\n\nexport default Game;","import React, { useState, useEffect } from 'react';\n\nconst BasicSquare = (props) => {\n  \n  const [myDiv, setMyDiv] = useState(<div className=\"board-square\"></div>);\n\n  const classActive = \" board-square board-basic-square-active\";\n  const classUnActive = \"board-square\"\n\n  const sendMouseEnter = () => {\n    props.sendEvent(props.index);\n  }\n\n  const sendMyClick = () => {\n    props.sendClick(props.index);\n  }\n\n\n  useEffect(() => {\n    if (props.active === true){\n      setMyDiv(<div className={classActive}  onMouseOver={sendMouseEnter} onClick={sendMyClick}></div>);\n    } else {\n      setMyDiv(<div className={classUnActive} onMouseOver={sendMouseEnter}></div>);\n    }\n  }, [props])\n\n  return (myDiv);\n}\n\nexport default BasicSquare;","import React, { useState, useEffect, useRef } from 'react';\nimport BasicSquare from './BasicSquare';\nimport {makeVertical, makeHorizontal, checkPositionAvailable} from '../functions/Helper'\n\nconst ChooseBoard = (props) => { \n  const [finished, setFinished] = useState(false);\n  const [currentShipIndex, setCurrentShipIndex] = useState(0);\n  const [shipSize, setShipSize] = useState(props.shipSizes[currentShipIndex]); // [5,4,4,3,3,2,2]\n  const [onHor, setOnHor] = useState(true); // horizontal/vertical\n  const [myShipArray, setMyShipArray] = useState([]);\n\n  const [helperBoard, setHelperBoard] = useState(new Array(100).fill(-1));\n  // 0 -> highlight\n  // 1 -> actually added\n    \n  const getMouseLocation = (location)=> {\n    let copyHelperBoard = resetHighlights();\n    let shipArray;\n    if (onHor===true){\n      shipArray = makeHorizontal(location,shipSize);\n    } else {\n      shipArray = makeVertical(location,shipSize);\n    }\n    if (checkPositionAvailable(shipArray, copyHelperBoard)){\n      shipArray.forEach((location) => {\n        copyHelperBoard[location] = 0;\n      })\n    } else {\n      copyHelperBoard.map((location) => {\n        if (location=== 0){\n          return -1;\n        }\n        return location;\n      })\n    }\n    setHelperBoard(copyHelperBoard);\n  }\n\n  const resetHighlights = () => {\n    let copyHelperBoard = [...helperBoard];\n    copyHelperBoard = copyHelperBoard.map((location) => {\n      if (location === 0){\n        return -1;\n      }\n      return location;\n    })\n    setHelperBoard(copyHelperBoard); // got rid of all highlights (0)\n    return copyHelperBoard;\n  }\n\n  const addShip = (location) => {\n    let copyHelperBoard = resetHighlights();\n    let shipArray;\n    if (onHor===true){\n      shipArray = makeHorizontal(location,shipSize);\n    } else {\n      shipArray = makeVertical(location,shipSize);\n    }\n    if (checkPositionAvailable(shipArray, copyHelperBoard)){\n      shipArray.forEach((location) => {\n        copyHelperBoard[location] = 1;\n      })\n      let copyMyShipArray = [...myShipArray];\n      copyMyShipArray.push(shipArray);\n      setMyShipArray(copyMyShipArray);\n      if (copyMyShipArray.length === props.shipSizes.length){\n        props.finished(copyMyShipArray);\n      }\n      setShipSize(props.shipSizes[currentShipIndex+1]);\n      setCurrentShipIndex(currentShipIndex+1);\n    }\n    setHelperBoard(copyHelperBoard);\n  }\n\n  return (\n    <div className =\"choose-board\">\n      <div className = \"board\">\n          {\n            helperBoard.map((location, index) => {\n              if (location === -1){\n                return <BasicSquare key={index} index={index} active={false} sendEvent={getMouseLocation} sendClick={addShip} />\n              }\n              return <BasicSquare key={index} index={index} active={true} sendEvent={getMouseLocation} sendClick={addShip}/>\n            })\n          }\n      </div>\n      <div>\n        <button className = \"button\" onClick = {() => setOnHor(!onHor)}>Rotate Ship</button>\n      </div>\n    </div>\n  );\n}\n\nexport default ChooseBoard;","import React, { useState} from 'react';\nimport Game from './components/Game';\nimport ChooseBoard from './components/ChooseBoard';\nimport './App.css';\n\nfunction App() {\n  const shipSizes = [5,4,4,3,3,2,2,2];\n  const [playerShipArrays, setPlayerShipArray] = useState([]);\n\n  const [gameMode, setGameMode] = useState(false)\n\n  const playerFinishedChoosing = (playerChoices) => {\n    alert('Player Finished Choosing: ', playerChoices);\n    console.log('Player Finished Choosing: ', playerChoices);\n    setPlayerShipArray(playerChoices);\n    setGameMode(true);\n  }\n\n  const restart = () => {\n    setGameMode(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"title-div\">\n        <h1>BATTLE-SHIP</h1>\n      </div>\n      <div>\n        {\n          gameMode === false \n            ? <ChooseBoard shipSizes={shipSizes} finished = {playerFinishedChoosing} />\n            : <Game playerShips ={playerShipArrays} shipSizes={shipSizes} finish={restart}/>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}